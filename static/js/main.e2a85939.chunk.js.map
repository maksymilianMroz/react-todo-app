{"version":3,"sources":["TodoBtns.js","App.js","serviceWorker.js","index.js"],"names":["TodoBtns","props","react_default","a","createElement","className","onClick","addTask","removeLastTask","clearAllTask","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","setState","newTask","todos","concat","toConsumableArray","state","title","splice","index","src_TodoBtns_0","bind","react_flip_move_es","duration","easing","map","todo","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yRAceA,SAXE,SAACC,GACd,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,MAAMC,QAASL,EAAMM,SAAvC,OACAL,EAAAC,EAAAC,cAAA,UAAQC,UAAU,MAAMC,QAASL,EAAMO,gBAAvC,UACAN,EAAAC,EAAAC,cAAA,UAAQC,UAAU,MAAMC,QAASL,EAAMQ,cAAvC,mBCwDGC,qBAzDb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAOFP,QAAU,WACRI,EAAKO,SAAS,CACZC,QAAS,cACTC,MAAK,GAAAC,OAAAT,OAAAU,EAAA,EAAAV,CAAMD,EAAKY,MAAMH,OAAjB,CAAwB,CAC3BI,MAAOb,EAAKY,MAAMJ,cAZVR,EAiBdH,eAAiB,WACf,IAAMY,EAAKR,OAAAU,EAAA,EAAAV,CAAOD,EAAKY,MAAMH,OAC7BA,EAAMK,OAAO,EAAG,GAChBd,EAAKO,SAAS,CACZE,WArBUT,EAyBdF,aAAe,SAACiB,GACd,IAAMN,EAAKR,OAAAU,EAAA,EAAAV,CAAOD,EAAKY,MAAMH,OAC7BA,EAAMK,OAAOC,GACbf,EAAKO,SAAS,CACZE,WA3BFT,EAAKY,MAAQ,CACXJ,QAAS,cACTC,MAAO,IAJGT,wEAkCZ,OACET,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAAd,YAEAH,EAAAC,EAAAC,cAACuB,EAAD,CACEpB,QAASO,KAAKP,QAAQqB,KAAKd,MAC3BN,eAAgBM,KAAKN,eAAeoB,KAAKd,MACzCL,aAAcK,KAAKL,aAAamB,KAAKd,QAEvCZ,EAAAC,EAAAC,cAAA,MAAIC,UAAU,QACZH,EAAAC,EAAAC,cAACyB,EAAA,EAAD,CAAUxB,UAAU,YAAYyB,SAAU,IAAKC,OAAO,YACnDjB,KAAKS,MAAMH,MAAMY,IAAI,SAACC,EAAMP,GAC3B,OAAQxB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YAAY6B,IAAKR,KACrCxB,EAAAC,EAAAC,cAAA,YAAO6B,EAAKT,MAAO,IAAME,gBAjDvBS,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxC,EAAAC,EAAAC,cAACuC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e2a85939.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoBtns.css';\n\nconst TodoBtns = (props) => {\n    return (\n        <div className=\"btn-container\">\n            <button className=\"btn\" onClick={props.addTask}>ADD</button>\n            <button className=\"btn\" onClick={props.removeLastTask}>REMOVE</button>\n            <button className=\"btn\" onClick={props.clearAllTask}>CLEAR</button>\n        </div>\n\n    )\n}\n\nexport default TodoBtns;","import React, { Component } from 'react';\nimport TodoBtns from './TodoBtns';\nimport FlipMove from \"react-flip-move\";\nimport './App.css';\n\nclass App extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      newTask: 'Task number',\n      todos: []\n    };\n  }\n\n  addTask = () => {\n    this.setState({\n      newTask: 'Task number',\n      todos: [...this.state.todos, {\n        title: this.state.newTask\n      }]\n    });\n  }\n\n  removeLastTask = () => {\n    const todos = [...this.state.todos];\n    todos.splice(0, 1)\n    this.setState({\n      todos\n    });\n  }\n\n  clearAllTask = (index) => {\n    const todos = [...this.state.todos];\n    todos.splice(index)\n    this.setState({\n      todos\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        <h1 className=\"app-header\">TODO App</h1>\n\n        <TodoBtns\n          addTask={this.addTask.bind(this)}\n          removeLastTask={this.removeLastTask.bind(this)}\n          clearAllTask={this.clearAllTask.bind(this)} />\n\n        <ul className=\"list\">\n          <FlipMove className=\"flip-move\" duration={250} easing=\"ease-out\">\n            {this.state.todos.map((todo, index) => {\n              return (<li className=\"list-item\" key={index++}>\n                <span>{todo.title}{' ' + index}</span>\n              </li>)\n            })}\n          </FlipMove>\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}